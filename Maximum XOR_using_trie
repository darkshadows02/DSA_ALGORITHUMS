 struct Node{
      Node* links[2];
            bool containskey(int bit){
                  return (links[bit]!=NULL);
            }
            void put(int bit, Node*node){
                   links[bit]=node;
            }
            Node*get(int bit){
                 return links[bit];
            }
   };

  class Tries{
          Node*root;
            public:
              Tries(){
                  root=new Node();
              }
              void insert(int num){
                     Node*node=root;
                     for(int i=31; i>=0; i--){
                         int bit=( (num>>i) &1);
                           if(!node->containskey(bit)){
                                 node->put(bit, new Node());
                           }
                           node=node->get(bit);
                     }
              }
              int maxelement(int num){
                  Node*node=root; 
                  int maxi=0;
                      for(int i=31; i>=0; i--){
                          int bit=((num>>i) & 1);
                             if(node->containskey(!bit)){
                                  maxi= maxi | (1<<i);
                                  node=node->get(!bit);
                             }else{
                                   node=node->get(bit);
                             }
                      }
                      return maxi;
              }
              
  };


int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
          Tries ti;
            for(auto x:arr1){
                    ti.insert(x);
            }
            int maxi=0;
              for(auto x:arr2){
                    maxi=max(maxi, ti.maxelement(x));
              }
              return maxi;
}
