 struct Node{
          Node*links[26];
          bool flg=false;
            public:
          bool containskey(char ch){
               return links[ch-'a']!=NULL;
          }
          void put(char ch, Node*node){
              links[ch-'a']=node;
          }
          Node*get(char ch){
              return links[ch-'a'];
          }
         void  setEnd(){
                  flg=true;
          }
          bool isend(){
              return flg;
          }
    };

class Trie {
    private:
      Node*root;
public:
 
    Trie() {
        root=new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
            Node*node=root;
            for(int i=0; i<word.size(); i++){
                    if(!node->containskey(word[i])){
                        node->put(word[i], new Node());
                    }
                    node=node->get(word[i]);
            }
            node->setEnd();
            
    }
 
    bool search(string word) {
             Node*node=root;
             for(int i=0; i<word.size(); i++){
                  if(!node->containskey(word[i])){
                        return false;
                    }
                    node=node->get(word[i]);
             }
             return node->isend();
    }
 
    bool startsWith(string prefix) {
           Node*node=root;
             for(int i=0; i<prefix.size(); i++){
                  if(!node->containskey(prefix[i])){
                        return false;
                    }
                    node=node->get(prefix[i]);
             }
             return true;
    }
};
