#include <bits/stdc++.h> 

struct Node{
          Node*links[26];
          int cntendwith=0;
          int cntprefix=0;
            public:
          bool containskey(char ch){
               return links[ch-'a']!=NULL;
          }
          void put(char ch, Node*node){
              links[ch-'a']=node;
          }
          Node*get(char ch){
              return links[ch-'a'];
          }
         void  increseend(){
                  cntendwith++;
          }
          void incresePrefix(){
                cntprefix++;
          }
          void deleteend(){
              cntendwith--;
          }
          void deleteprefix(){
              cntprefix--;
          }
          int findend(){
              return cntendwith;
          }
          int findprefix(){
              return cntprefix;
          }
    };


class Trie{
        private:
      Node*root;
    public:

    Trie(){
       root=new Node();
    }

    void insert(string &word){
       Node*node=root;
            for(int i=0; i<word.size(); i++){
                    if(!node->containskey(word[i])){
                        node->put(word[i], new Node());
                    }
                    node=node->get(word[i]);
                    node->incresePrefix();
            }
            node->increseend();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
          Node*node=root;
            for(int i=0; i<word.size(); i++){
                      if(!node->containskey(word[i])){
                         return 0;
                    }
                    node=node->get(word[i]);
            }
            return node->findend();
    }

    int countWordsStartingWith(string &word){
          Node*node=root;
                for(int i=0; i<word.size(); i++){
                      if(!node->containskey(word[i])){
                         return 0;
                    }
                    node=node->get(word[i]);
            }
            return node->findprefix();
    }

    void erase(string &word){
          Node*node=root;
                for(int i=0; i<word.size(); i++){
                          if(!node->containskey(word[i])){
                         return ;
                    }
                   node=node->get(word[i]);
                    node->deleteprefix();
                }
                node->deleteend();
    }
};
